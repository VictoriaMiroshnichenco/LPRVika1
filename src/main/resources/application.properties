# Logging
logging.level.org.springframework.data=INFO
logging.level.org.springframework.jdbc.core.JdbcTemplate=DEBUG

#does not work
security.basic.enabled=false

#does not work
security.ignored=/**


spring.security.user.name=user
spring.security.user.password=password
# H2-Console
spring.h2.console.enabled=true

# JPA
#Hibernate uses for DDL generation based on anotation mapping
#spring.jpa.generate-ddl=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto=validate
#needs for script-based initialization
spring.sql.init.mode=always
#spring.sql.init.mode=NEVER
#both Hibernate automatic schema generation in conjugation with script-based schema creation and data population
# it needs to have data.sql executed before datasource initialisation
#This will ensure that after Hibernate schema creation is performed, then additionally schema.sql is read for any additional schema changes, and further data.sql is executed to populate the database.
spring.jpa.defer-datasource-initialization=true
#it runs before schema.sql basing on jpa mapping
#spring.jpa.hibernate.ddl-auto=update
#this means that only  script-based initialization through schema.sql and data.sql will work
#spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true

spring.main.allow-bean-definition-overriding=true
## MySQL
#spring.datasource.username=root
#spring.datasource.password=password
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/testdb?autoReconnect=true&useSSL=false&allowPublicKeyRetrieval=true


spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect